
package com.mycompany.programa2futoshiki;

import static com.mycompany.programa2futoshiki.GUITop10.setTop; // para cargar el top

import javax.swing.*; //swing para el gui
import java.awt.*; //para component componentes 
import java.io.*; //manejo de archivos

//archivos y xml (JAXB)
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import java.io.File;




/**
 *
 * @author Kendall Ariel Rojas Cartin
 */
public class GUIFutoshiki extends javax.swing.JFrame {
    //variables jugador 
    private static String nombre = "incognito";
    private static String password;
    
    public static Jugador jugadorActual;
    
    public static Configuracion configFutoshiki = new Configuracion((byte) 5, "Facil", false, "Cronometro", false);
    /**
     * Creates new form GUIFutoshiki
     */
    public GUIFutoshiki() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        fondoPanel = new javax.swing.JPanel();
        panelFutoshiki = new javax.swing.JPanel();
        labelFutoshiki = new javax.swing.JLabel();
        labelMenu = new javax.swing.JLabel();
        indicadorLabel = new javax.swing.JLabel();
        jugadorLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuConfigurar = new javax.swing.JMenu();
        menuTamanoCuadricula = new javax.swing.JMenu();
        item3x3 = new javax.swing.JMenuItem();
        item4x4 = new javax.swing.JMenuItem();
        item5x5 = new javax.swing.JMenuItem();
        item6x6 = new javax.swing.JMenuItem();
        item7x7 = new javax.swing.JMenuItem();
        item8x8 = new javax.swing.JMenuItem();
        item9x9 = new javax.swing.JMenuItem();
        item10x10 = new javax.swing.JMenuItem();
        menuNivel = new javax.swing.JMenu();
        nivelFacil = new javax.swing.JMenuItem();
        nivelIntermedio = new javax.swing.JMenuItem();
        nivelDificil = new javax.swing.JMenuItem();
        menuMultinivel = new javax.swing.JMenu();
        itemNoMultinivel = new javax.swing.JMenuItem();
        itemSiMultinivel = new javax.swing.JMenuItem();
        menuReloj = new javax.swing.JMenu();
        itemRelojCronometro = new javax.swing.JMenuItem();
        itemRelojNo = new javax.swing.JMenuItem();
        itemRelojTemporizador = new javax.swing.JMenuItem();
        menuPanelDigitos = new javax.swing.JMenu();
        itemPosicionDerecha = new javax.swing.JMenuItem();
        itemPosicionIzquierda = new javax.swing.JMenuItem();
        itemNombreJugador = new javax.swing.JMenuItem();
        menuJugar = new javax.swing.JMenu();
        menuTop10 = new javax.swing.JMenu();
        menuAyuda = new javax.swing.JMenu();
        menuAcercaDe = new javax.swing.JMenu();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fondoPanel.setBackground(new java.awt.Color(255, 255, 255));

        panelFutoshiki.setBackground(new java.awt.Color(204, 0, 51));

        labelFutoshiki.setBackground(new java.awt.Color(204, 0, 51));
        labelFutoshiki.setFont(new java.awt.Font("Sitka Text", 1, 36)); // NOI18N
        labelFutoshiki.setForeground(new java.awt.Color(255, 255, 255));
        labelFutoshiki.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelFutoshiki.setText("FUTOSHIKI");
        labelFutoshiki.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout panelFutoshikiLayout = new javax.swing.GroupLayout(panelFutoshiki);
        panelFutoshiki.setLayout(panelFutoshikiLayout);
        panelFutoshikiLayout.setHorizontalGroup(
            panelFutoshikiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFutoshikiLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(labelFutoshiki, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelFutoshikiLayout.setVerticalGroup(
            panelFutoshikiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFutoshikiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelFutoshiki, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        labelMenu.setFont(new java.awt.Font("Sitka Text", 1, 24)); // NOI18N
        labelMenu.setForeground(new java.awt.Color(0, 0, 0));
        labelMenu.setText("Menu Principal");

        indicadorLabel.setForeground(new java.awt.Color(0, 0, 0));

        jugadorLabel.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jugadorLabel.setForeground(new java.awt.Color(0, 0, 0));
        jugadorLabel.setText("Jugador: ");

        javax.swing.GroupLayout fondoPanelLayout = new javax.swing.GroupLayout(fondoPanel);
        fondoPanel.setLayout(fondoPanelLayout);
        fondoPanelLayout.setHorizontalGroup(
            fondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoPanelLayout.createSequentialGroup()
                .addGap(0, 46, Short.MAX_VALUE)
                .addComponent(indicadorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 987, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(fondoPanelLayout.createSequentialGroup()
                .addGroup(fondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoPanelLayout.createSequentialGroup()
                        .addGap(417, 417, 417)
                        .addComponent(labelMenu))
                    .addGroup(fondoPanelLayout.createSequentialGroup()
                        .addGap(318, 318, 318)
                        .addGroup(fondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelFutoshiki, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jugadorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fondoPanelLayout.setVerticalGroup(
            fondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jugadorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(165, 165, 165)
                .addComponent(panelFutoshiki, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelMenu)
                .addGap(18, 18, 18)
                .addComponent(indicadorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        menuBar.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N

        menuConfigurar.setText("Configurar");

        menuTamanoCuadricula.setText("Tama√±o de la Cuadricula");

        item3x3.setText("3 x 3");
        item3x3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item3x3ActionPerformed(evt);
            }
        });
        menuTamanoCuadricula.add(item3x3);

        item4x4.setText("4 x 4");
        item4x4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item4x4ActionPerformed(evt);
            }
        });
        menuTamanoCuadricula.add(item4x4);

        item5x5.setForeground(new java.awt.Color(255, 0, 51));
        item5x5.setText("5 x 5");
        item5x5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item5x5ActionPerformed(evt);
            }
        });
        menuTamanoCuadricula.add(item5x5);

        item6x6.setText("6 x 6");
        item6x6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item6x6ActionPerformed(evt);
            }
        });
        menuTamanoCuadricula.add(item6x6);

        item7x7.setText("7 x 7");
        item7x7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item7x7ActionPerformed(evt);
            }
        });
        menuTamanoCuadricula.add(item7x7);

        item8x8.setText("8 x 8");
        item8x8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item8x8ActionPerformed(evt);
            }
        });
        menuTamanoCuadricula.add(item8x8);

        item9x9.setText("9 x 9");
        item9x9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item9x9ActionPerformed(evt);
            }
        });
        menuTamanoCuadricula.add(item9x9);

        item10x10.setText("10 x 10");
        item10x10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item10x10ActionPerformed(evt);
            }
        });
        menuTamanoCuadricula.add(item10x10);

        menuConfigurar.add(menuTamanoCuadricula);

        menuNivel.setText("Nivel de Juego");

        nivelFacil.setForeground(new java.awt.Color(255, 0, 0));
        nivelFacil.setText("Facil");
        nivelFacil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nivelFacilActionPerformed(evt);
            }
        });
        menuNivel.add(nivelFacil);

        nivelIntermedio.setText("Intermedio");
        nivelIntermedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nivelIntermedioActionPerformed(evt);
            }
        });
        menuNivel.add(nivelIntermedio);

        nivelDificil.setText("Dificil");
        nivelDificil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nivelDificilActionPerformed(evt);
            }
        });
        menuNivel.add(nivelDificil);

        menuConfigurar.add(menuNivel);

        menuMultinivel.setText("Multinivel");

        itemNoMultinivel.setForeground(new java.awt.Color(255, 0, 0));
        itemNoMultinivel.setText("No");
        itemNoMultinivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNoMultinivelActionPerformed(evt);
            }
        });
        menuMultinivel.add(itemNoMultinivel);

        itemSiMultinivel.setText("Si");
        itemSiMultinivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSiMultinivelActionPerformed(evt);
            }
        });
        menuMultinivel.add(itemSiMultinivel);

        menuConfigurar.add(menuMultinivel);

        menuReloj.setText("Uso del reloj");

        itemRelojCronometro.setForeground(new java.awt.Color(255, 0, 0));
        itemRelojCronometro.setText("Cronometro");
        itemRelojCronometro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRelojCronometroActionPerformed(evt);
            }
        });
        menuReloj.add(itemRelojCronometro);

        itemRelojNo.setText("No");
        itemRelojNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRelojNoActionPerformed(evt);
            }
        });
        menuReloj.add(itemRelojNo);

        itemRelojTemporizador.setText("Temporizador");
        itemRelojTemporizador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRelojTemporizadorActionPerformed(evt);
            }
        });
        menuReloj.add(itemRelojTemporizador);

        menuConfigurar.add(menuReloj);

        menuPanelDigitos.setText("Posici√≥n en la ventana del panel de d√≠gitos");

        itemPosicionDerecha.setForeground(new java.awt.Color(255, 0, 0));
        itemPosicionDerecha.setText("Derecha");
        itemPosicionDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPosicionDerechaActionPerformed(evt);
            }
        });
        menuPanelDigitos.add(itemPosicionDerecha);

        itemPosicionIzquierda.setText("Izquierda");
        itemPosicionIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPosicionIzquierdaActionPerformed(evt);
            }
        });
        menuPanelDigitos.add(itemPosicionIzquierda);

        menuConfigurar.add(menuPanelDigitos);

        itemNombreJugador.setText("Nombre del jugador");
        itemNombreJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNombreJugadorActionPerformed(evt);
            }
        });
        menuConfigurar.add(itemNombreJugador);

        menuBar.add(menuConfigurar);

        menuJugar.setText("Jugar");
        menuJugar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuJugarMouseClicked(evt);
            }
        });
        menuBar.add(menuJugar);

        menuTop10.setText("Top 10");
        menuTop10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuTop10MouseClicked(evt);
            }
        });
        menuBar.add(menuTop10);

        menuAyuda.setText("Ayuda");
        menuAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAyudaMouseClicked(evt);
            }
        });
        menuBar.add(menuAyuda);

        menuAcercaDe.setText("Acerca de.");
        menuAcercaDe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAcercaDeMouseClicked(evt);
            }
        });
        menuBar.add(menuAcercaDe);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fondoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fondoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    public static void setNombre(String pNombre){
        nombre = pNombre;
    }
    
    public static void setPassword(String pPassword){
        password = pPassword;
    }
    
    public static void setJugadorLabel(){
        jugadorLabel.setText("Jugador: "+nombre);
    }
    
    public static void setJugador(Jugador jugador){
        jugadorActual = jugador;
    }
    
    
    public static void setConfiguracion(Configuracion config){
        configFutoshiki = config;
    }
    
    public static String getNombre(){
        return nombre;
    }
    
    public static String getPassword(){
        return password;
    }
    
    public void limpiarForegroundMenu(JMenu menuRecorrer){ //para volver normal a los demas cuando se selecciona algo
        for (int i = 0; i < menuRecorrer.getItemCount(); i++) { //consigue la cantidad de items
            JMenuItem item = menuRecorrer.getItem(i); 
            if (item.getForeground()== Color.RED || item.getForeground()!= Color.RED) {
                item.setForeground(Color.BLACK);
            }
        }
    }
    
    public void verificarForeground(){ //pone en color rojo la configuracion guardada al iniciar
        Component[] componentesConfigurar = menuConfigurar.getMenuComponents();

        for (Component componenteMenu: componentesConfigurar) { 
            if (componenteMenu instanceof JMenu itemsMenu){
                    Component[] menuDeConfig = itemsMenu.getMenuComponents();

                    for (Component componenteItem: menuDeConfig)
                        if (componenteItem instanceof JMenuItem item){
                            if (item.equals(item3x3) && configFutoshiki.getCuadricula() == (byte) 3) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(item4x4) && configFutoshiki.getCuadricula()== (byte) 4) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(item5x5) && configFutoshiki.getCuadricula()== (byte) 5) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(item6x6) && configFutoshiki.getCuadricula()== (byte) 6) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(item7x7) && configFutoshiki.getCuadricula()== (byte) 7) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(item8x8) && configFutoshiki.getCuadricula()== (byte) 8) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(item9x9) && configFutoshiki.getCuadricula()== (byte) 9) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(item10x10) && configFutoshiki.getCuadricula()== (byte) 10) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(nivelFacil) && configFutoshiki.getNivel().equals("Facil")) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(nivelIntermedio) && configFutoshiki.getNivel().equals("Intermedio")) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(nivelDificil) && configFutoshiki.getNivel().equals("Dificil")) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(itemNoMultinivel) && configFutoshiki.getMultinivel() == false) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(itemSiMultinivel) && configFutoshiki.getMultinivel() == true) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(itemRelojCronometro) && configFutoshiki.getReloj().equals("Cronometro")) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(itemRelojNo) && configFutoshiki.getReloj().equals("No")) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(itemRelojTemporizador) && configFutoshiki.getReloj().equals("Temporizador")) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(itemPosicionDerecha) && configFutoshiki.getPosicion()==false) {
                                item.setForeground(Color.RED);
                            }
                            else if (item.equals(itemPosicionIzquierda) && configFutoshiki.getPosicion()==true) {
                                item.setForeground(Color.RED);
                            }
                            else{
                                item.setForeground(Color.BLACK);
                            }
                        }
                    }
                }
            }

    

    
    
    private void menuAcercaDeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAcercaDeMouseClicked
         System.out.println("Acerca de.");
        
         // la info del acerca de 
         JTextArea areaTexto = new JTextArea();
         areaTexto.setEditable(false);
         areaTexto.setText("FUTOSHIKI \n"
                          +"Version: PONER AL TERMINAR \n"
                          +"Fecha de creaci√≥n: 24/10/2024 \n"
                          +"Autor: Kendall Ariel Rojas Cartin");
         areaTexto.setFont(new Font("Sitka Text",Font.BOLD,22));
         
        //ventana para mostrar la informacion
        JDialog ventanaInfo = new JDialog();
        ventanaInfo.setTitle("Acerca De.");
        ventanaInfo.setModal(true); // lo pone en modal lo que hace que no se pueda hacer nada hasta cerrar 
        ventanaInfo.setBounds(500, 500, 500, 300); // x y ancho y altura
        
        ventanaInfo.add(areaTexto);
        ventanaInfo.setVisible(true);

    }//GEN-LAST:event_menuAcercaDeMouseClicked

    private void menuAyudaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAyudaMouseClicked
        System.out.println("PDF");
        try {
            File archivoPDF = new File("files/programa2_futoshiki_manual_de_usuario.pdf"); //RECORDAR QUE EL MANUAL ESTA VACIO (Borrar comentario luego)

            if (archivoPDF.exists()){ //determina si existe
                Desktop.getDesktop().open(archivoPDF); //Desktop es para acceder a las funciones y de esta manera abrir el archivo
            } else {
                indicadorLabel.setText("No se encontro el PDF");
            }
        } 
        catch (IOException e) { //si hay un error al abrir
            indicadorLabel.setText(e.getMessage());
        }
    }//GEN-LAST:event_menuAyudaMouseClicked

    private void itemNombreJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNombreJugadorActionPerformed
        System.out.println("Nombre");
        
        GUIJugador nuevoInicio = new GUIJugador();
        nuevoInicio.setVisible(true);
        nuevoInicio.setEnabled(true);
        nuevoInicio.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); //para que no se cierre todo al cerrar esta
    }//GEN-LAST:event_itemNombreJugadorActionPerformed

    private void item3x3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item3x3ActionPerformed
        limpiarForegroundMenu(menuTamanoCuadricula);
        if (item3x3.getForeground()!= Color.RED){
            item3x3.setForeground(Color.RED);
        }
        configFutoshiki.setCuadricula((byte)3);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_item3x3ActionPerformed

    private void item4x4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item4x4ActionPerformed
        limpiarForegroundMenu(menuTamanoCuadricula);
        if (item4x4.getForeground()!= Color.RED){
            item4x4.setForeground(Color.RED);
        }
        configFutoshiki.setCuadricula((byte)4);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_item4x4ActionPerformed

    private void item5x5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item5x5ActionPerformed
        limpiarForegroundMenu(menuTamanoCuadricula);
        if (item5x5.getForeground()!= Color.RED){
            item5x5.setForeground(Color.RED);
        }
        configFutoshiki.setCuadricula((byte)5);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_item5x5ActionPerformed

    private void item6x6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item6x6ActionPerformed
        limpiarForegroundMenu(menuTamanoCuadricula);
        if (item6x6.getForeground()!= Color.RED){
            item6x6.setForeground(Color.RED);
        }
        configFutoshiki.setCuadricula((byte)6);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_item6x6ActionPerformed

    private void item7x7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item7x7ActionPerformed
        limpiarForegroundMenu(menuTamanoCuadricula);
        if (item7x7.getForeground()!= Color.RED){
            item7x7.setForeground(Color.RED);
        }
        configFutoshiki.setCuadricula((byte)7);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_item7x7ActionPerformed

    private void item8x8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item8x8ActionPerformed
        limpiarForegroundMenu(menuTamanoCuadricula);
        if (item8x8.getForeground()!= Color.RED){
            item8x8.setForeground(Color.RED);
        }
        configFutoshiki.setCuadricula((byte)8);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_item8x8ActionPerformed

    private void item9x9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item9x9ActionPerformed
        limpiarForegroundMenu(menuTamanoCuadricula);
        if (item9x9.getForeground()!= Color.RED){
            item9x9.setForeground(Color.RED);
        }
        configFutoshiki.setCuadricula((byte)9);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_item9x9ActionPerformed

    private void item10x10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item10x10ActionPerformed
        limpiarForegroundMenu(menuTamanoCuadricula);
        if (item10x10.getForeground()!= Color.RED){
            item10x10.setForeground(Color.RED);
        }
        configFutoshiki.setCuadricula((byte)10);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_item10x10ActionPerformed

    private void nivelFacilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nivelFacilActionPerformed
        limpiarForegroundMenu(menuNivel);
        if (nivelFacil.getForeground()!= Color.RED){
            nivelFacil.setForeground(Color.RED);
        }
        configFutoshiki.setNivel("Facil");
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_nivelFacilActionPerformed

    private void nivelIntermedioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nivelIntermedioActionPerformed
        limpiarForegroundMenu(menuNivel);
        if (nivelIntermedio.getForeground()!= Color.RED){
            nivelIntermedio.setForeground(Color.RED);
        }
        configFutoshiki.setNivel("Intermedio");
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_nivelIntermedioActionPerformed

    private void nivelDificilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nivelDificilActionPerformed
        limpiarForegroundMenu(menuNivel);
        if (nivelDificil.getForeground()!= Color.RED){
            nivelDificil.setForeground(Color.RED);
        }
        configFutoshiki.setNivel("Dificil");
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_nivelDificilActionPerformed

    private void itemNoMultinivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNoMultinivelActionPerformed
        limpiarForegroundMenu(menuMultinivel);
        if (itemNoMultinivel.getForeground()!= Color.RED){
            itemNoMultinivel.setForeground(Color.RED);
        }
        configFutoshiki.setMultinivel(false);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_itemNoMultinivelActionPerformed

    private void itemSiMultinivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSiMultinivelActionPerformed
        limpiarForegroundMenu(menuMultinivel);
        if (itemSiMultinivel.getForeground()!= Color.RED){
            itemSiMultinivel.setForeground(Color.RED);
        }
        configFutoshiki.setMultinivel(true);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_itemSiMultinivelActionPerformed

    private void itemRelojCronometroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRelojCronometroActionPerformed
        limpiarForegroundMenu(menuReloj);
        if (itemRelojCronometro.getForeground()!= Color.RED){
            itemRelojCronometro.setForeground(Color.RED);
        }
        configFutoshiki.setReloj("Cronometro");
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_itemRelojCronometroActionPerformed

    private void itemRelojNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRelojNoActionPerformed
        limpiarForegroundMenu(menuReloj);
        if (itemRelojNo.getForeground()!= Color.RED){
            itemRelojNo.setForeground(Color.RED);
        }
        configFutoshiki.setReloj("No");
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_itemRelojNoActionPerformed

    private void itemRelojTemporizadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRelojTemporizadorActionPerformed
        limpiarForegroundMenu(menuReloj);
        
        
        System.out.println(configFutoshiki.toStringConfiguracion());
        
        //ventana para el temporizador 
        JDialog ventanaTemp = new JDialog();
        ventanaTemp.setTitle("Configurar Temporizador");
        ventanaTemp.setModal(true); // lo pone en modal lo que hace que no se pueda hacer nada hasta cerrar 
        ventanaTemp.setBounds(400, 400, 500, 200); // x y ancho y altura
        
        ventanaTemp.setLayout(null); //mantener diseno y evitar que se acomoden las cosas
        
        JTextField horaField = new JTextField();
        JTextField minutoField = new JTextField();
        JTextField segundoField = new JTextField();
        
        JLabel horaLabel = new JLabel();
        JLabel minutoLabel = new JLabel();
        JLabel segundoLabel = new JLabel();
        
        horaLabel.setFont(new Font("Sitka Text",Font.BOLD,12));
        horaLabel.setText("Hora");
        minutoLabel.setFont(new Font("Sitka Text",Font.BOLD,12));
        minutoLabel.setText("Minuto");
        segundoLabel.setFont(new Font("Sitka Text",Font.BOLD,12));
        segundoLabel.setText("Segundo");
        
        horaField.setText(String.valueOf(configFutoshiki.getTemporizadorHora())); 
        minutoField.setText(String.valueOf(configFutoshiki.getTemporizadorMinuto()));
        segundoField.setText(String.valueOf(configFutoshiki.getTemporizadorSegundo()));
        
        horaField.setBounds(50, 50, 100, 30);    // x, y, ancho y altura
        minutoField.setBounds(150, 50, 100, 30);
        segundoField.setBounds(250, 50, 100, 30);
        
        horaLabel.setBounds(50, 10, 100, 30);    // x, y, ancho y altura
        minutoLabel.setBounds(150, 10, 100, 30);
        segundoLabel.setBounds(250, 10, 100, 30);
        
        //label para indicar error o que se guardo bien
        JLabel mensajeLabel = new JLabel();
        mensajeLabel.setFont(new Font("Sitka Text",Font.BOLD,16));
        mensajeLabel.setForeground(Color.GREEN);
        mensajeLabel.setText("");
        mensajeLabel.setBounds(50, 80, 500, 50);    // x, y, ancho y altura
        
        //boton para guardar la configuracin
        JButton guardarTemporizador = new JButton();
        guardarTemporizador.setText("Guardar");
        guardarTemporizador.setFont(new Font("Sitka Text",Font.BOLD,12));
        guardarTemporizador.setBounds(350, 50, 100, 30);
        
        guardarTemporizador.addActionListener(new java.awt.event.ActionListener(){ //creacion de boton de crearUsuario
           public void actionPerformed(java.awt.event.ActionEvent evt) {
               try{
                   configFutoshiki.setTemporizadorHora(Integer.parseInt(horaField.getText()));
                   configFutoshiki.setTemporizadorMinuto(Integer.parseInt(minutoField.getText()));
                   configFutoshiki.setTemporizadorSegundo(Integer.parseInt(segundoField.getText()));
                   
                   configFutoshiki.comprobarTemporizador();
                   
                   configFutoshiki.setReloj("Temporizador");
                   itemRelojTemporizador.setForeground(Color.RED);
                   Configuracion.guardarConfiguracionXML(configFutoshiki);
                   
                   mensajeLabel.setForeground(Color.BLUE);
                   mensajeLabel.setText("Configuracion guardada!");
                   
                   horaField.setText("");
                   minutoField.setText("");
                   segundoField.setText("");
                   
               }
               catch(IllegalArgumentException e){
                   mensajeLabel.setText(e.getMessage());
                   mensajeLabel.setForeground(Color.RED);
               }
               
           }
        });
        
        
        ventanaTemp.add(horaField);
        ventanaTemp.add(minutoField);
        ventanaTemp.add(segundoField);
        ventanaTemp.add(horaLabel);
        ventanaTemp.add(minutoLabel);
        ventanaTemp.add(segundoLabel);
        ventanaTemp.add(mensajeLabel);
        ventanaTemp.add(guardarTemporizador);
        ventanaTemp.setVisible(true);
        
        verificarForeground();
    }//GEN-LAST:event_itemRelojTemporizadorActionPerformed

    private void itemPosicionDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPosicionDerechaActionPerformed
        limpiarForegroundMenu(menuPanelDigitos);
        if (itemPosicionDerecha.getForeground()!= Color.RED){
            itemPosicionDerecha.setForeground(Color.RED);
        }
        configFutoshiki.setPosicion(false);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_itemPosicionDerechaActionPerformed

    private void itemPosicionIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPosicionIzquierdaActionPerformed
        limpiarForegroundMenu(menuPanelDigitos);
        if (itemPosicionIzquierda.getForeground()!= Color.RED){
            itemPosicionIzquierda.setForeground(Color.RED);
        }
        configFutoshiki.setPosicion(true);
        System.out.println(configFutoshiki.toStringConfiguracion());
        Configuracion.guardarConfiguracionXML(configFutoshiki); //guardar en archivo la configuracion
    }//GEN-LAST:event_itemPosicionIzquierdaActionPerformed

    private void menuJugarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuJugarMouseClicked
        System.out.println("JUGAR");
        String[] argumentos = {""}; //no le pasa argumentos (de momento talvez lo cambie)
        GUIJugar.main(argumentos);
        
    }//GEN-LAST:event_menuJugarMouseClicked

    private void menuTop10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuTop10MouseClicked
        System.out.println("TOP10");
        String[] argumentos = {""}; //no le pasa argumentos (de momento talvez lo cambie)
        GUITop10.main(argumentos);
    }//GEN-LAST:event_menuTop10MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIFutoshiki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIFutoshiki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIFutoshiki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIFutoshiki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUIFutoshiki gui = new GUIFutoshiki();
                gui.setVisible(true);
                try {
                    setConfiguracion(Configuracion.cargarConfiguracionXML());
                    setTop(Top10.cargarTopXML());
                    
                } catch (Exception e) {
                    System.out.println("Archivo no encontrado"); //la primera vez 
                }
                System.out.println(Configuracion.cargarConfiguracionXML().toStringConfiguracion());
                System.out.println(Configuracion.toStringJugadores());
                gui.verificarForeground();
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel fondoPanel;
    private javax.swing.JLabel indicadorLabel;
    private javax.swing.JMenuItem item10x10;
    private javax.swing.JMenuItem item3x3;
    private javax.swing.JMenuItem item4x4;
    private javax.swing.JMenuItem item5x5;
    private javax.swing.JMenuItem item6x6;
    private javax.swing.JMenuItem item7x7;
    private javax.swing.JMenuItem item8x8;
    private javax.swing.JMenuItem item9x9;
    private javax.swing.JMenuItem itemNoMultinivel;
    private javax.swing.JMenuItem itemNombreJugador;
    private javax.swing.JMenuItem itemPosicionDerecha;
    private javax.swing.JMenuItem itemPosicionIzquierda;
    private javax.swing.JMenuItem itemRelojCronometro;
    private javax.swing.JMenuItem itemRelojNo;
    private javax.swing.JMenuItem itemRelojTemporizador;
    private javax.swing.JMenuItem itemSiMultinivel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private static javax.swing.JLabel jugadorLabel;
    private javax.swing.JLabel labelFutoshiki;
    private javax.swing.JLabel labelMenu;
    private javax.swing.JMenu menuAcercaDe;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuConfigurar;
    private javax.swing.JMenu menuJugar;
    private javax.swing.JMenu menuMultinivel;
    private javax.swing.JMenu menuNivel;
    private javax.swing.JMenu menuPanelDigitos;
    private javax.swing.JMenu menuReloj;
    private javax.swing.JMenu menuTamanoCuadricula;
    private javax.swing.JMenu menuTop10;
    private javax.swing.JMenuItem nivelDificil;
    private javax.swing.JMenuItem nivelFacil;
    private javax.swing.JMenuItem nivelIntermedio;
    private javax.swing.JPanel panelFutoshiki;
    // End of variables declaration//GEN-END:variables
}
